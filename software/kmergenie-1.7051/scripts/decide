#!/usr/bin/env python

doc = """KmerGenie - decision script for a set of histograms

Usage:
    decide <histograms_prefix> [options]

Options:
    --diploid       use the diploid model
    --first_pass    do not display 'best k' at the end, inform user of rough estimation
    -t <value>      number of threads (default: 1)
"""

import sys, os, subprocess, glob, re
from multiprocessing import Pool, cpu_count, Lock
import locale # to decode stdout that is binary now
import traceback # http://seasonofcode.com/posts/python-multiprocessing-and-exceptions.html

if sys.version_info[0] == 2 and sys.version_info[1] < 5:
    sys.exit("Python >= 2.5 is required")

if sys.version_info[0] == 2:
    #unbuffered print, solves badly ordered stdout on clusters
    #I don't yet know how to make this python3-compatible, so it's active for python2 only
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'wb', 0)

encoding = locale.getpreferredencoding() # do not use getdefaultlocale(), fix suggested by E. Deveaud
if encoding is None:
    encoding = 'ascii'

if len(sys.argv) <= 1:
    sys.exit(doc)

args = sys.argv[1:] 
histograms_prefix = args[0]
is_diploid = "T" if "--diploid" in args else "F"
first_pass = "--first_pass" in args
debug = "--debug" in args
nb_threads = (cpu_count() - 1) if "-t" not in args else int(args[args.index("-t")+1])

DIR = os.path.dirname(os.path.realpath(__file__))

def run(command):
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    rc = process.wait()
    return rc, stdout.decode(encoding), stderr.decode(encoding)

def fit_histogram(histfile, lock=Lock()):
    try:
        match = re.search(r".*-k(\d+).*", histfile)
        if match:
            k = int(match.group(1))
        else:
            print("Error during fit_histogram: file %s is not of the form [histogram_prefix]-k[number].histo" % histfile)
            return None

        hist_full_path = os.path.abspath(histfile)

        rcmd = '''hist.file=\'%s\'; is.diploid=%s; source(\'%s/est-genomic-kmers.r\',chdir=T)''' % (hist_full_path, is_diploid, DIR)
        command = ['Rscript','--no-init-file','-e',rcmd]

        rc, stdout, stderr = run(command)    
        if debug:
            print(stdout)
            print(stderr)
        halted = "Execution halted" in stderr

        # plotting that histogram + fit
        rcmd = '''hist.file='%s'; is.diploid=%s; source('%s/plot_histogram.r', chdir=T);''' % (hist_full_path, is_diploid, DIR)
        command = ['Rscript','--no-init-file','-e',rcmd]
        run(command)

        if rc != 0 or halted:
            print("could not fit %s" % histfile)
            return None

        nb_genomic_kmers = int(stdout.split('\n')[-1].strip())
        nb_nonrepeated_kmers, nb_repeated_kmers, cutoff = 0, 0 ,0

        for line in stdout.split('\n'):
            if line.startswith("non-repeated genomic distinct kmers:"):
                nb_nonrepeated_kmers = line.split()[-1]
            if line.startswith("repeated genomic distinct kmers:"):
                nb_repeated_kmers = line.split()[-1]
            if line.startswith("cutoff:"):
                cutoff = int(line.split()[-1])
            #if line.startswith("sum of"): # just for debugging
            #    absdiff = float(line.split()[-1])
            #    print "sum of absolute differences between fit and histogram for k=%d" % k, absdiff

        #print "full stdout:\n--\n",stdout,"\n--" # debug
        return k, nb_genomic_kmers, nb_nonrepeated_kmers, nb_repeated_kmers, cutoff
    except Exception as e:
        with lock:
            print('\nCaught exception in fit_histogram worker thread (histfile = %s):' % histfile)
            traceback.print_exc()
        raise e

list_histograms = sorted(glob.glob(histograms_prefix+"*.histo"))
p = Pool(nb_threads)
    
results_filename = histograms_prefix+".dat"
results_file = open(results_filename,"w")

#results_file.write("k genomic.kmers genomic.nonrepeated.kmers genomic.repeated.kmers cov.cutoff\n")
results_file.write("k genomic.kmers cov.cutoff\n")

try:
    outputs = p.map(fit_histogram, list_histograms)
except KeyboardInterrupt:
    print("Caught KeyboardInterrupt, terminating.")
    p.terminate()
    p.join()
    sys.exit(0)

genomic_kmers = dict()
cutoffs = dict()
genomic_kmers[0] = 0 
cutoffs[0] = 0
outputs = filter(lambda x: x is not None, outputs)
for output in sorted(outputs):
    if output == None:
        continue
    k, nb_genomic_kmers, nb_nonrepeated_kmers, nb_repeated_kmers, cutoff = output
    genomic_kmers[k] = nb_genomic_kmers
    cutoffs[k] = cutoff
    #results_file.write("%s %s %s %s %s\n" % (k, nb_genomic_kmers, nb_nonrepeated_kmers, nb_repeated_kmers, cutoff) )
    results_file.write("%s %s %s\n" % (k, nb_genomic_kmers, cutoff) )

max_genomic_kmers, cutoff_for_best_k, best_k = max([(genomic_kmers[k], cutoffs[k], k) for k in genomic_kmers])
results_file.close()

# generate html report
from generate_report import generate_report
generate_report(histograms_prefix, best_k, max_genomic_kmers, None, is_diploid)

# cleanup
hist_dirname = os.path.dirname(histograms_prefix)
histograms_path = hist_dirname if hist_dirname != '' else '.'
for f in [ f for f in os.listdir(histograms_path) if f.startswith("fit.dat-" + os.path.basename(histograms_prefix)) ]:
    os.remove(histograms_path + "/" + f)

if best_k == 0:
    print("could not predict a best k value")
else:
    # plot histogram.dat file
    command = ["Rscript",'--no-init-file',"%s/plot_genomic_kmers.r" % DIR, results_filename, str(best_k), str(max_genomic_kmers)]
    run(command)

    if first_pass:
        print("estimation of the best k so far: %d" %  best_k)
    else:
        print("table of predicted num. of genomic k-mers: %s" % results_filename)
        print("recommended coverage cut-off for best k: %d" % cutoff_for_best_k)
        print("best k: %d" % best_k)
sys.exit(best_k)
