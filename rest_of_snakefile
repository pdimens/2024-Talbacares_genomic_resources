### REMOVE

rule purge_haplotigs_I_hist:
	input:
		assembly = "init_polish/{prefix}.pilon_longshort.fasta",
		mapfile = "purge_haplotigs/first/{prefix}_to_assembly.bam",
		mapindex = "purge_haplotigs/first/{prefix}_to_assembly.bam.bai"
	output:
		histo = "purge_haplotigs/first/{prefix}_to_assembly.bam.gencov",
		hist_image = "purge_haplotigs/first/{prefix}_to_assembly.bam.histogram.png"
	message: "Generating coverage histogram for purging"
	threads: 16
	params:
		depth = "-d 620"
	shell:
		"""
		cd purge_haplotigs/first/
		purge_haplotigs hist -b ../../{input.mapfile} -g ../../{input.assembly} -t {threads} {params}
		"""

rule purge_haplotigs_suspects_I:
	input:
		hist_cov = "purge_haplotigs/first/{prefix}_to_assembly.bam.gencov"  
	output:
		cov_out = "purge_haplotigs/first/{prefix}_assembly_stats.csv"
	params:
		low = "-low 192",
		mid = "-mid 352",
		high = "-high 448"
	message: "Finding suspect contigs"
	shell:
		"""
		purge_haplotigs cov -i {input} {params} -o {output} 
		"""

rule map_for_mec:
	input:
		in1 = "reads/short_trimmed/{prefix}.illumina.R1.fq",
		in2 = "reads/short_trimmed/{prefix}.illumina.R2.fq",
		assembly = "init_polish/{prefix}.pilon_longshort.fasta"
	output: 
		mapfile = "misassembly/{prefix}_to_assembly.bam",
		mapindex = "misassembly/{prefix}_to_assembly.bam.bai"
	message: "Mapping short reads onto the polished consensus assembly"
	threads: 16
	shell:
		"""
		software/bwa-mem2/bwa-mem2 index {input.assembly}
		software/bwa-mem2/bwa-mem2 mem -t {threads} {input.assembly} {input.in1} {input.in2} | samtools view -hb -F4 -q30 -@{threads} | samtools sort -m 7G -l2  -@{threads} > {output.mapfile}	
		samtools index {output.mapfile} -@{threads}
		"""

rule MEC:
	input:
		f = "reads/short_trimmed/{prefix}.illumina.R1.fq",
		r = "reads/short_trimmed/{prefix}.illumina.R2.fq",
		asm = "init_polish/{prefix}.pilon_longshort.fasta",
		mapfile = "misassembly/{prefix}_to_assembly.bam",
		mapindex = "misassembly/{prefix}_to_assembly.bam.bai"
	output: 
		asm = "misassembly/{prefix}.MEC.fasta"
	params: 
		mapqual = "-q 32",
		insertsize = "-m 300",
		insertvariance = "-s 100"
	message: "Finding and removing misassemblies using MEC"
	shell:
		"""
		python2 software/MEC/src/mec.py -i {input.asm} -bam {input.mapfile} -o {output.asm} {params}
		"""

rule racon_preprocess_illumina:
	input:
		reads_f = "reads/short_trimmed/{prefix}.illumina.70x.R1.fq",
		reads_r = "reads/short_trimmed/{prefix}.illumina.70x.R2.fq",
	output: temp("reads/short_trimmed/{prefix}.illumina.70x.racon.fq")
	message: "Preprocessing short reads to work for racon polishing"
	shell: "software/racon/racon_preprocess.py {input} > {output}"

rule map_short_racon_polish:
	input:
		reads = "reads/short_trimmed/{prefix}.illumina.70x.racon.fq",
		assembly = "init_polish/{prefix}.racon_long.fasta"
	output:
		mapfile = temp("init_polish/{prefix}.short_to_longpolished.sam")
	message: "Mapping 70x subsampled short reads to long-read polished consensus"
	threads: 30
	shell:
		"""
		minimap2 -t {threads} -ax sr --sam-hit-only {input.assembly} {input.reads} | samtools view -h -F4 -q15 -@ {threads} > {output}
		"""
####

rule racon_short_polish:
	input:
		reads = "reads/short_trimmed/{prefix}.illumina.70x.racon.fq",
		mapfile = "init_polish/{prefix}.short_to_longpolished.sam",
		assembly = "init_polish/{prefix}.racon_long.fasta"
	output:
		asm = "init_polish/{prefix}.racon_longshort.fasta"
	message: "Polishing consensus with racon using subsampled short reads"
	threads: 30
	shell:
		"""
		racon -t {threads} {input.reads} {input.mapfile} {input.assembly} > {output}
		"""

rule short_mapfile:
	input: "init_polish/{prefix}.short_to_longpolished.sam"
	output:
		mapfile = "init_polish/{prefix}.short_to_longpolished.bam",
		indexed = "init_polish/{prefix}.short_to_longpolished.bam.bai"
	message: "compressing alignment file to sorted/indexed BAM"
	threads: 30
	shell:
		"""
		samtools view -hb -@{threads} {input} | samtools sort -m 16G -l0  -@{threads} > {output.mapfile}	
		samtools index {output.mapfile} -@{threads}
		"""


rule map_for_purge:
	input:
		in1 = "reads/short_trimmed/{prefix}.illumina.R1.fq",
		in2 = "reads/short_trimmed/{prefix}.illumina.R2.fq",
		consensus = "init_polish/{prefix}.genome.fasta"
	output: 
		mapfile = temp("purge_haplotigs/first/{prefix}_to_assembly.bam"),
		mapindex = temp("purge_haplotigs/first/{prefix}_to_assembly.bam.bai")
	message: "Mapping short reads onto the polished consensus assembly"
	threads: 16
	shell:
		"""
		software/bwa-mem2/bwa-mem2 index {input.consensus}
		software/bwa-mem2/bwa-mem2 mem -t {threads} {input.consensus} {input.in1} {input.in2} | samtools view -hb -F4 -q10 -@{threads} | samtools sort -m 16G -l0  -@{threads} > {output.mapfile}	
		samtools index {output.mapfile} -@{threads}
		"""

rule purge_haplotigs_I_hist:
	input:
		assembly = "init_polish/{prefix}.genome.fasta",
		mapfile = "purge_haplotigs/first/{prefix}_to_assembly.bam",
	mapindex = "purge_haplotigs/first/{prefix}_to_assembly.bam.bai"
	output:
		histo = "purge_haplotigs/first/{prefix}_to_assembly.bam.gencov",
		hist_image = "purge_haplotigs/first/{prefix}_to_assembly.bam.histogram.png"
	message: "Generating coverage histogram for purging"
	threads: 16
	params:
		depth = "-d 620"
	shell:
		"""
		cd purge_haplotigs/first/
		purge_haplotigs hist -b ../../{input.mapfile} -g ../../{input.consensus} -t {threads} {params.depth}
		"""

rule purge_haplotigs_suspects_I:
	input:
		hist_cov = "purge_haplotigs/first/{prefix}_to_assembly.bam.gencov"  
	output:
		cov_out = "purge_haplotigs/first/{prefix}_assembly_stats.csv"
	params:
		low = "-low 192",
		mid = "-mid 352",
		high = "-high 448"
	message: "Finding suspect contigs"
	shell:
		"""
		purge_haplotigs cov -i {input} {params} -o {output} 
		"""

rule purge_haplotigs_I:
	input:
		consensus = "consensus/{prefix}_consensus.fasta",
		mapfile = "purge_haplotigs/first/{prefix}_to_consensus.bam",
		suspects = "purge_haplotigs/first/{prefix}_coverage_stats.csv"
	output:
		curated = "purge_haplotigs/first/{prefix}_purge_I.fasta"
	log:
		haplotigs = "purge_haplotigs/first/{prefix}_purge_I.haplotigs.fasta",
		artefacts = "purge_haplotigs/first/{prefix}_purge_I.artefacts.fasta",
		reassignments = "purge_haplotigs/first/{prefix}_purge_I.reassignments.tsv",
		logs = "purge_haplotigs/first/{prefix}_purge_I.contig_associations.log"
	threads: 16
	message: "Purging haplotigs"
	params:
		prefix = "-o {prefix}_purge_I"
	shell:
		"""
		cd purge_haplotigs/first
		purge_haplotigs purge {params} -t {threads} -g ../../{input.consensus} -c ../../{input.suspects} -d -b ../../{input.mapfile}
		"""

rule map_for_MEC:
	input:
		in1 = "reads/short_trimmed/{prefix}.illumina.R1.fq",
		in2 = "reads/short_trimmed/{prefix}.illumina.R2.fq",
		purged_asm = "purge_haplotigs/first/{prefix}_purge_I.fasta"
	output: 
		mapfile = "misassembly/{prefix}_to_purgeI.bam",
		mapindex = "misassembly/{prefix}_to_purgeI.bam.bai"
	params: 
		samfile = "misassembly/{prefix}_to_purgeI.sam"
	message: "Mapping short reads onto the purged genome for misassembly removal"
	threads: 16
	shell:
		"""
		software/bwa-mem2/bwa-mem2 index {input.purged_asm}
		software/bwa-mem2/bwa-mem2 mem -t {threads} -v 1 {input.purged_asm} {input.in1} {input.in2} | samtools view -hb -F4 -q10 -@{threads} | samtools sort -m 16G -l0  -@{threads} > {output.mapfile}	
		samtools index {output.mapfile} -@{threads}
		software/BamQC/bin/bamqc {output.mapfile} -t {threads} -q -o misassembly
		"""

rule MEC:
	input:
		asm = "purge_haplotigs/first/{prefix}_purge_I.fasta",
		mapfile = "misassembly/{prefix}_to_purgeI.bam"
	output: 
		asm = "misassembly/{prefix}.MEC.fasta"
	params: 
		mapqual = 30
	message: "Finding and removing misassemblies using MEC"
	shell:
		"""
		python2 software/MEC/src/mec.py -i {input.asm} -bam {input.mapfile} -o {output.asm} -q {params.mapqual}
		"""

rule map_for_purge_II:
	input:
		in1 = "reads/short_trimmed/{prefix}.illumina.R1.fq",
		in2 = "reads/short_trimmed/{prefix}.illumina.R2.fq",
		asm = "misassembly/{prefix}.MEC.fasta"
	output: 
		mapfile = "purge_haplotigs/second/{prefix}_to_MEC.bam",
		mapindex = "purge_haplotigs/second/{prefix}_to_MEC.bam.bai"
	message: "Mapping short reads onto the misassembly-filtered genome"
	threads: 16
	shell:
		"""
		software/bwa-mem2/bwa-mem2 index {input.asm}
		software/bwa-mem2/bwa-mem2 mem -t {threads} {input.asm} {input.in1} {input.in2} | samtools view -hb -F4 -q10 -@{threads} | samtools sort -m 16G -l0  -@{threads} > {output.mapfile}	
		samtools index {output.mapfile} -@{threads}
		"""


rule purge_haplotigs_II_hist:
	input:
		asm = "misassembly/{prefix}.MEC.fasta",
		mapfile = "purge_haplotigs/second/{prefix}_to_MEC.bam"
	output:
		histo = "purge_haplotigs/second/{prefix}_to_MEC.bam.gencov"
	log:
		hist_image = "purge_haplotigs/second/{prefix}_to_MEC.bam.histogram.png"
	message: "Generating coverage histogram for purging"
	threads: 16
	params:
		depth = "-d 620"
	shell:
		"""
		cd purge_haplotigs/second/
		purge_haplotigs hist -b ../../{input.mapfile} -g ../../{input.asm} -t {threads} {params.depth}
		"""

#### STOP HERE #####
rule purge_haplotigs_suspects_II:
	input:
		hist_cov = "purge_haplotigs/second/{prefix}_to_MEC.bam.gencov"  
	output:
		cov_out = "purge_haplotigs/second/{prefix}_coverage_stats.csv"
	params:
		low = "-low 192",
		mid = "-mid 352",
		high = "-high 448"
	message: "Finding suspect contigs"
	shell:
		"""
		purge_haplotigs cov -i {input} {params} -o {output} 
		"""

rule purge_haplotigs_II:
	input:
		asm = "misassembly/{prefix}.MEC.fasta",
		mapfile = "purge_haplotigs/second/{prefix}_to_MEC.bam",
		suspects = "purge_haplotigs/second/{prefix}_coverage_stats.csv"
	output:
		curated = "purge_haplotigs/second/{prefix}_purge_II.fasta"
	log:
		haplotigs = "purge_haplotigs/second/{prefix}_purge_II.haplotigs.fasta",
		artefacts = "purge_haplotigs/second/{prefix}_purge_II.artefacts.fasta",
		reassignments = "purge_haplotigs/second/{prefix}_purge_II.reassignments.tsv",
		logs = "purge_haplotigs/second/{prefix}_purge_II.contig_associations.log"
	threads: 16
	message: "Purging haplotigs"
	params:
		prefix = "-o {prefix}_purge_II"
	shell:
		"""
		cd purge_haplotigs/second
		purge_haplotigs purge {params} -t {threads} -g ../../{input.asm} -c ../../{input.suspects} -d -b ../../{input.mapfile}
		"""

rule map_final_polish:
	input:
		in1 = "reads/short_trimmed/{prefix}.illumina.R1.fq",
		in2 = "reads/short_trimmed/{prefix}.illumina.R2.fq",
		asm = "purge_haplotigs/second/{prefix}_purge_II.fasta"
	output:
		mapfile = "polish/{prefix}_to_purgeII.bam",
		mapindex = "polish/{prefix}_to_purgeII.bam.bai"
	message: "Mapping short reads onto the double-purged genome"
	threads: 16
	shell:
		"""
		software/bwa-mem2/bwa-mem2 index {input.asm}
		software/bwa-mem2/bwa-mem2 mem -t {threads} {input.asm} {input.in1} {input.in2} | samtools view -hb -F4 -q10 -@{threads} | samtools sort -m 16G -l0  -@{threads} > {output.mapfile}	
		samtools index {output.mapfile} -@{threads}
		"""

rule final_polish:
	input:
		asm = "purge_haplotigs/second/{prefix}_purge_II.fasta",
		mapfile = "polish/{prefix}_to_purgeII.bam"
	output:
		asm = "polish/{prefix}.genome.fasta"
	message: "Polishing with Pilon"
	threads: 16
	params:
		out = "--output {prefix}.genome",
		outdir = "--outdir polish"
	shell:
		"""
		pilon --genome {input.asm} --frags {input.mapfile} --fix "all","amb" --changes --threads {threads} --diploid {params.out} {params.outdir}
		# rename contigs
		sed -i 's/Backbone/Talbacares/g' {output.asm} && sed -i 's/_pilon//g' {output.asm}
		"""

rule map_for_report:
	input:
		in1 = "reads/short_trimmed/{prefix}.illumina.R1.fq",
		in2 = "reads/short_trimmed/{prefix}.illumina.R2.fq",
		asm = "polish/{prefix}.genome.fasta"
	output:
		mapfile = "genome_report/{prefix}_genome.bam",
		mapindex = "genome_report/{prefix}_genome.bam.bai"
	message: "Mapping short reads onto the final assembly"
	threads: 16
	shell:
		"""
		software/bwa-mem2/bwa-mem2 index {input.asm}
		software/bwa-mem2/bwa-mem2 mem -t {threads} {input.asm} {input.in1} {input.in2} | samtools view -hb -F4 -q10 -@{threads} | samtools sort -m 16G -l0  -@{threads} > {output.mapfile}	
		samtools index {output.mapfile} -@{threads}
		"""
